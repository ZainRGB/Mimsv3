Complete ASP.NET Core MVC Registration Solution
Here's the complete solution in text format. You can use this as a reference to rebuild the project with your own naming conventions.

1. Project Structure
UserRegistration/
├── Controllers/
│   └── AccountController.cs
├── Models/
│   ├── AppDbContext.cs
│   └── RegisterUser.cs
├── Views/
│   ├── Account/
│   │   ├── Register.cshtml
│   │   └── Success.cshtml
│   └── Shared/
│       └── _Layout.cshtml
├── appsettings.json
└── Program.cs

2. Model Classes
Models/RegisterUser.cs
csharp
Copy
using System.ComponentModel.DataAnnotations;

namespace UserRegistration.Models
{
    public class RegisterUser
    {
        public int Id { get; set; }

        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Surname is required")]
        public string Surname { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }
    }
}
Models/AppDbContext.cs
csharp
Copy
using Microsoft.EntityFrameworkCore;

namespace UserRegistration.Models
{
    public class AppDbContext : DbContext
    {
        public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
        {
        }

        public DbSet<RegisterUser> Users { get; set; }
    }
}
3. Controller
Controllers/AccountController.cs
csharp
Copy
using Microsoft.AspNetCore.Mvc;
using UserRegistration.Models;

namespace UserRegistration.Controllers
{
    public class AccountController : Controller
    {
        private readonly AppDbContext _context;

        public AccountController(AppDbContext context)
        {
            _context = context;
        }

        // GET: Account/Register
        public IActionResult Register()
        {
            return View();
        }

        // POST: Account/Register
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Register(RegisterUser user)
        {
            if (ModelState.IsValid)
            {
                _context.Users.Add(user);
                _context.SaveChanges();
                return RedirectToAction("Success");
            }
            return View(user);
        }

        // GET: Account/Success
        public IActionResult Success()
        {
            return View();
        }
    }
}
4. Views
Views/Account/Register.cshtml
html
Copy
@model UserRegistration.Models.RegisterUser

@{
    ViewData["Title"] = "User Registration";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="Register" method="post">
    <div class="form-group">
        <label asp-for="Username"></label>
        <input asp-for="Username" class="form-control" />
        <span asp-validation-for="Username" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Surname"></label>
        <input asp-for="Surname" class="form-control" />
        <span asp-validation-for="Surname" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Email"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</form>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
Run HTML
Views/Account/Success.cshtml
html
Copy
@{
    ViewData["Title"] = "Registration Successful";
}

<div class="alert alert-success">
    <h2>Registration Completed Successfully!</h2>
    <p>Thank you for registering with us.</p>
    <a asp-action="Register" class="btn btn-primary">Register Another User</a>
</div>
Run HTML
5. Configuration
appsettings.json
json
Copy
{
  "ConnectionStrings": {
    "DefaultConnection": "server=localhost;database=UserRegistration;user=root;password=yourpassword;"
  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}
Program.cs
csharp
Copy
using Microsoft.EntityFrameworkCore;
using UserRegistration.Models;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllersWithViews();

// Add DbContext with MySQL
builder.Services.AddDbContext<AppDbContext>(options =>
    options.UseMySql(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        ServerVersion.AutoDetect(builder.Configuration.GetConnectionString("DefaultConnection"))
    ));

var app = builder.Build();

// Configure the HTTP request pipeline.
if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Account}/{action=Register}/{id?}");

app.Run();
6. Database Setup (MySQL)
Run these SQL commands to create your database and table:

sql
Copy
CREATE DATABASE UserRegistration;
USE UserRegistration;

CREATE TABLE Users (
    Id INT AUTO_INCREMENT PRIMARY KEY,
    Username VARCHAR(50) NOT NULL,
    Surname VARCHAR(50) NOT NULL,
    Email VARCHAR(100) NOT NULL
);
7. NuGet Packages Required
Install these packages via NuGet Package Manager:

Pomelo.EntityFrameworkCore.MySql

Microsoft.EntityFrameworkCore.Design

Microsoft.EntityFrameworkCore.Tools

8. How to Test
Run the application (F5)

Navigate to /Account/Register

Fill out the form and submit

You should be redirected to /Account/Success

Check your MySQL database to verify the record was created

Troubleshooting Tips
If you get view not found errors:

Verify the view exists in the correct folder (Views/ControllerName)

Check the view name matches exactly (case-sensitive)

For database connection issues:

Test your connection string in MySQL Workbench first

Verify MySQL service is running

For model binding problems:

Ensure property names match between model and view

Clean and rebuild your solution

You can adapt this solution by changing:

Namespace (UserRegistration to your preferred name)

Controller name (AccountController to whatever you prefer)

Model name (RegisterUser to your choice)

View names and locations