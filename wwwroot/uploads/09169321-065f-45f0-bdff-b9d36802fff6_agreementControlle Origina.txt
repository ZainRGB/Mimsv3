using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Agreement.Models;
using Agreement.Data;
using System.Diagnostics;

namespace Agreement.Controllers
{
    public class AgreementController : Controller
    {
        private readonly AppDbContext _context;
        private readonly IConfiguration _config;
        private readonly IWebHostEnvironment _env;

        public AgreementController(AppDbContext context, IConfiguration config, IWebHostEnvironment env)
        {
            _context = context;
            _config = config;
            _env = env;
        }

        // First Form (File Uploads)
        public IActionResult Index() => View();

        // Second Form (With Signature)
        public IActionResult Index2(int id)
        {
            var agreement = _context.Agreements.Find(id);
            if (agreement == null)
            {
                return NotFound();
            }
            return View(agreement);


        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Index2(int id, AgreementRecord record)
        {
            if (id != record.Id)
            {
                return NotFound();
            }

            try
            {
                var existingAgreement = await _context.Agreements.FindAsync(id);
                if (existingAgreement == null)
                {
                    return NotFound();
                }

                // Update only the signature-related fields
                existingAgreement.SignatureData = record.SignatureData;
                existingAgreement.SignedDate = DateTime.Now;

                // Update doctor's name if needed
                existingAgreement.drfullname = record.drfullname;

                _context.Update(existingAgreement);
                await _context.SaveChangesAsync();

                //return RedirectToAction("Index2", new { id = record.Id });
                return RedirectToAction("ThankYou", new { id = record.Id });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error saving signature: {ex.Message}");
                ModelState.AddModelError("", "An error occurred while saving the signature.");
                return View(record);
            }
        }

        [HttpPost]
        public async Task<IActionResult> Create(AgreementRecord record)
        {
            var uploadPath = _config["FileUploadPath"] ?? Path.Combine(_env.WebRootPath, "uploads");
            Directory.CreateDirectory(uploadPath);

            // Process hpcsafile
            if (record.hpcsa != null)
            {
                record.hpcsafile = record.hpcsa.FileName;
                record.hpcsafileStoredName = $"{Guid.NewGuid()}{Path.GetExtension(record.hpcsa.FileName)}";
                await SaveFile(record.hpcsa, Path.Combine(uploadPath, record.hpcsafileStoredName));
            }

            // Process bohffile
            if (record.boh != null)
            {
                record.bohffile = record.boh.FileName;
                record.bohffileStoredname = $"{Guid.NewGuid()}{Path.GetExtension(record.boh.FileName)}";
                await SaveFile(record.boh, Path.Combine(uploadPath, record.bohffileStoredname));
            }

            // Process ppiifile
            if (record.ppi != null)
            {
                record.ppiifile = record.ppi.FileName;
                record.ppiifileStoredName = $"{Guid.NewGuid()}{Path.GetExtension(record.ppi.FileName)}";
                await SaveFile(record.ppi, Path.Combine(uploadPath, record.ppiifileStoredName));
            }

            // Process idfile
            if (record.idf != null)
            {
                record.idfile = record.idf.FileName;
                record.idfileStoredName = $"{Guid.NewGuid()}{Path.GetExtension(record.idf.FileName)}";
                await SaveFile(record.idf, Path.Combine(uploadPath, record.idfileStoredName));
            }

            // Process qsfile
            if (record.qsf != null)
            {
                record.qsfile = record.qsf.FileName;
                record.qsfileStoredName = $"{Guid.NewGuid()}{Path.GetExtension(record.qsf.FileName)}";
                await SaveFile(record.qsf, Path.Combine(uploadPath, record.qsfileStoredName));
            }

            // Process emerfile
            if (record.emer != null)
            {
                record.emerfile = record.emer.FileName;
                record.emerfileStoredName = $"{Guid.NewGuid()}{Path.GetExtension(record.emer.FileName)}";
                await SaveFile(record.emer, Path.Combine(uploadPath, record.emerfileStoredName));
            }

            try
            {
                _context.Agreements.Add(record);
                await _context.SaveChangesAsync();

                return RedirectToAction("Index2", new { id = record.Id });
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error saving agreement: {ex.Message}");
                ModelState.AddModelError("", "An error occurred while saving the data.");
                return View("Index", record);
            }
        }

        public async Task<IActionResult> DownloadFile(string storedName)
        {
            var uploadPath = _config["FileUploadPath"] ?? Path.Combine(_env.WebRootPath, "uploads");
            var filePath = Path.Combine(uploadPath, storedName);

            if (!System.IO.File.Exists(filePath))
            {
                return NotFound();
            }

            var memory = new MemoryStream();
            using (var stream = new FileStream(filePath, FileMode.Open))
            {
                await stream.CopyToAsync(memory);
            }
            memory.Position = 0;

            var contentType = "application/octet-stream";
            var ext = Path.GetExtension(filePath).ToLowerInvariant();
            switch (ext)
            {
                case ".pdf": contentType = "application/pdf"; break;
                case ".doc": contentType = "application/msword"; break;
                case ".docx": contentType = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"; break;
                case ".xls": contentType = "application/vnd.ms-excel"; break;
                case ".xlsx": contentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"; break;
                case ".txt": contentType = "text/plain"; break;
            }

            return File(memory, contentType, storedName);
        }

        private async Task SaveFile(IFormFile file, string path)
        {
            using var stream = new FileStream(path, FileMode.Create);
            await file.CopyToAsync(stream);
        }




        public IActionResult ThankYou(int id)
        {
            var agreement = _context.Agreements.Find(id);
            if (agreement == null)
            {
                return NotFound();
            }
            return View(agreement);
        }
    }
}